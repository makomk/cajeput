// Defines the opcodes for the Cajeput VM
// TODO - feed this into the compiler for code generation purposes

0 NOOP: ->
1 ABORT: -> (INVALID)   // should never appear in actual bytecode!
2 ADD_II: int + int -> int
3 SUB_II: int - int -> int
4 MUL_II: int * int -> int
5 DIV_II: int / int -> int
6 ADD_FF: float + float -> float
7 SUB_FF: float - float -> float
8 MUL_FF: float * float -> float
9 DIV_FF: float / float -> float
10 RET: -> (RET)
11 MOD_II: int % int -> int
12 AND_II: int & int -> int   // todo
13 OR_II: int | int -> int   //  todo
14 XOR_II: int ^ int -> int   // todo
15 NOT_I: ~ int -> int   // todo
16 SHL: int << int -> int   //  todo
17 SHR: int >> int -> int   // todo
18 AND_L: int && int -> int   // non-short circuiting, of course
19 OR_L: int || int -> int
20 NOT_L: ! int -> int
21 COND: int -> (COND)   // pops value from stack, skips next insn if it's 0
22 NCOND: int -> (COND)   // pops value from stack, skips next insn unless it's 0
23 EQ_II: int == int -> int
24 NEQ_II: int != int -> int
25 GR_II: int > int -> int
26 LES_II: int < int -> int
27 GEQ_II: int >= int -> int
28 LEQ_II: int <= int -> int
29 DROP_I: int ->
30 DROP_P: str ->  // FIXME - bad type!
31 DROP_I3: vect ->
32 DROP_I4: rot ->
33 PRINT_I: int ->
34 PRINT_F: float ->
35 PRINT_STR: str ->
36 CAST_I2F: int -> float
37 CAST_F2I: float -> int
38 CAST_I2S: int -> str
39 CAST_F2S: float -> str
40 BEGIN_CALL: -> ret_addr   // magic. Move somewhere saner?
41 INC_I: int++ -> int   // for optimisation of i++
42 DEC_I: int-- -> int
43 ADD_SS: str + str -> str
// 44 ADD_SI: str + int -> str
// 45 ADD_SF: str + float -> str
// 46 ADD_SV: str + vect -> str // needed?
// 47 ADD_SR: str + rot -> str // needed
48 EQ_FF: float == float -> int // need to implement these
49 NEQ_FF: float != float -> int
50 GR_FF: float > float -> int
51 LES_FF: float < float -> int
52 GEQ_FF: float >= float -> int
53 LEQ_FF: float <= float -> int
54 EQ_SS: str == str -> int // need to implement this

// now for some casts in boolean contexts
55 CAST_F2B: float -> int // not same as F2I
56 CAST_S2B: str -> int 
57 CAST_K2B: key -> int // again, not same as S2B.
58 CAST_L2B: list -> int
59 CAST_V2B: vect -> int
60 CAST_R2B: rot -> int
